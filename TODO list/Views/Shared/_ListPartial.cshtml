@inject TODO_list.Models.TodoContext _context
@using TODO_list.Extensions
@model List<TODO_list.Models.TodoItem>

@{
    var Confetti = _context.Settings.FirstOrDefault(s => s.Title == "Confetti" && s.IsOn);
    var confettiTrigger = Confetti != null && Confetti.IsOn ? "shootConfettiAndSubmit(this)" : "this.form.submit()";
}

@{
    <ul>
        @if (!Model.Any())
        {
            <div> No tasks </div>
        }

        @foreach (var item in Model)
        {
            <li  class="todo-list">
                <form asp-action="ToggleComplete" method="post" style="display:inline; cursor:;">
                    <input type="hidden" name="Id" value="@item.Id" />
                    <input type="checkbox" class ="green-checkbox" name="IsDone" onchange="@confettiTrigger" @(item.IsDone ? "checked" : "")>


                </form>


                @item.Title  - @ToDoExtensions.GetStatus(item)
                <form asp-action="RemoveTask" method="post" style="display:inline">
                    <input type="hidden" name="Id" value="@item.Id" />
                    <button type="submit" class="small-button" style="">remove</button>
                </form>

            </li>
        }



    </ul>
	
}
